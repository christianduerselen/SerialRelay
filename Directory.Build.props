<Project>

  <Import Project="$(MSBuildThisFileDirectory)Directory.Product.props" />
  <Import Project="$(MSBuildThisFileDirectory)Directory.Versions.props" />

  <PropertyGroup>
    <!-- Sign assemblies with accompanying key -->
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)Key.snk</AssemblyOriginatorKeyFile>	
    <SignAssemblyPublicKey>0024000004800000940000000602000000240000525341310004000001000100d9baf7ecec656960583b9ff7de2dfbb6270d0d0c5c8676a13b9bd6d79e2097fba403ac0210822af17227113f433f11691e66996528af64b4a6f19ee742435debbb8b20978487a35ffdd9843fb210c8f28c8470f316fdb5ed5ab799215c31b8c0e53acd708b214d28235c036efcfc2fcaa821b5a56367b259375f3d98f5ead0ce</SignAssemblyPublicKey>

    <!-- Place obj and bin directories for build in the root directory above src -->
    <BaseIntermediateOutputPath>$(MSBuildThisFileDirectory)\obj\$(MSBuildProjectName)\</BaseIntermediateOutputPath>
    <BaseOutputPath>$(MSBuildThisFileDirectory)\bin\Projects\$(MSBuildProjectName)\</BaseOutputPath>

    <!-- Set warning level to hightest value 5 and treat compile warnings as errors-->
    <WarningLevel>5</WarningLevel>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

    <!-- Set fixed analysis level 5, enable all rules and treat warnings as errors -->
    <AnalysisLevel>5</AnalysisLevel>
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
    <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>

    <!-- Set C# language version 10.0 -->
    <LangVersion>10.0</LangVersion>    
  </PropertyGroup>

  <!-- Enable git versioning via accompanying version.json -->
  <ItemGroup>
    <PackageReference Include="Nerdbank.GitVersioning" Version="$(NerdbankGitVersioningVersion)">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- PACKAGING AND DEBUG SYMBOL DISTRIBUTION -->
  <PropertyGroup>
    <!-- By default no projects are packable but can be overridden if needed -->
    <IsPackable>false</IsPackable>
    <!-- Debugging is done through additional debug symbols in the package for Azure DevOps - see https://github.com/dotnet/sourcelink#alternative-pdb-distribution -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="$(MicrosoftSourceLinkGitHubVersion)" PrivateAssets="All"/>
  </ItemGroup>
  
  <!-- TEST -->
  <PropertyGroup>
    <!-- Test projects are named "[Project under test].Test" and automatically reference necessary dependencies -->
    <IsTestProject>$(MSBuildProjectName.EndsWith('.Tests'))</IsTestProject>
  </PropertyGroup>
  <!-- Enable access to internal variables to accompanying test projects with implicit InternalsVisibleTo attribute -->
  <ItemGroup Condition="!$(IsTestProject)">
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <_Parameter1>$(AssemblyName).Tests, PublicKey=$(SignAssemblyPublicKey)</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>
  <!-- Set coverage output directory and format for test projects -->
  <PropertyGroup Condition="$(IsTestProject) AND '$(CollectCoverage)' == 'true'">
    <CoverletOutput Condition="'$(CoverletOutputDir)' != '' AND '$(CoverletOutput)' == ''">$(CoverletOutputDir)/$(MSBuildProjectName).xml</CoverletOutput>
    <CoverletOutputFormat Condition="'$(CoverletOutputFormat)' == ''">cobertura</CoverletOutputFormat>
  </PropertyGroup>
  <!-- Test projects automatically reference necessary dependencies -->
  <ItemGroup Condition="$(IsTestProject)">
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="$(MicrosoftNETTestSdkVersion)" />
    <PackageReference Include="xunit" Version="$(XunitVersion)" />
    <PackageReference Include="xunit.runner.visualstudio" Version="$(XunitRunnerVisualStudioVersion)" />
    <PackageReference Include="coverlet.collector" Version="$(CoverletCollectorVersion)">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>
  
</Project>
